{"mappings":"AACA,IAAIA,EAAe,CACjB,CACEC,SAAU,WACVC,KAAM,IACNC,KAAM,EACNC,eAAe,EACfC,KAAM,UAER,CACEJ,SAAU,WACVC,KAAM,IACNC,KAAM,EACNC,eAAe,EACfC,KAAM,WAER,CACEJ,SAAU,WACVC,KAAM,OACNC,KAAM,EACNC,eAAe,EACfC,KAAM,SAER,CACEJ,SAAU,WACVC,KAAM,IACNC,KAAM,EACNC,eAAe,EACfC,KAAM,UAER,CACEJ,SAAU,WACVC,KAAM,IACNC,KAAM,EACNC,eAAe,EACfC,KAAM,WAKV,MAGaC,EAAgBC,IAE3B,IAAK,IAAIC,EAAe,EAAGA,EAAeD,EAAME,OAAQD,GAAgB,EAAG,CAEzE,MAAME,GAPcC,EAOeJ,EAAME,OAPbG,KAAKC,MAAMD,KAAKE,SAAWH,IASjDI,EAAaR,EAAMG,GAEnBM,EAAcT,EAAMC,GAE1BD,EAAMC,GAAgBO,EACtBR,EAAMG,GAAeM,EAdL,IAAIL,EAkBtB,OAAOJ,GAYIU,EAAQ,KAEnB,MAAMC,EAAU,GAEVC,EAAQ,CAAC,SAAU,UAAW,QAAS,UAG7C,IAAK,IAAIC,EAAY,EAAGA,EAAYD,EAAMV,OAAQW,GAAa,EAAG,CAEhE,MAAMC,EAAcF,EAAMC,GAI1B,IAAK,IAAIE,EAAc,EAAGA,GAAe,GAAIA,GAAe,EAAG,CAE7D,IAAIC,EAAQ,GAAMD,IAGD,MAAbC,EACFA,EAAW,MACW,OAAbA,EACTA,EAAW,OACW,OAAbA,EACTA,EAAW,QACW,OAAbA,IACTA,EAAW,QAIb,MAAMC,EAAO,CACXtB,KAAMqB,EACNlB,KAAMgB,EACNlB,KAAMmB,EACNrB,SAAQ,GAAKoB,KAAeE,IAC5BnB,eAAe,GAIjBc,EAAQO,KAAKD,IAKjB,OAAON,GAQIQ,EAAS,CAAIC,EAAMC,EAAMC,EAAY,KAEhD,IAAKD,EAAM,CAET,IAAIE,EAAY,GAChB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAWE,GAAK,EAClCD,EAAUL,KAAKE,EAAKK,OAEtB,OAAOF,EAIP,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAKnB,OAAQsB,GAAK,EACP,GAAzBH,EAAKG,GAAG3B,gBACV6B,QAAQC,IAAI,OAAQN,EAAKG,IACzBH,EAAKG,GAAK,KACVH,EAAKG,GAAKJ,EAAKK,QAUjBG,EAAS,CAAIP,EAAMQ,KACvB,IAAIC,EAAQ,GACZ,IAAK,IAAIN,EAAI,EAAGA,EAAIH,EAAKnB,OAAQsB,GAAK,EAAG,CACvC,IAAIO,EAAcV,EAAKG,GAAGK,GACtBE,KAAeD,EACjBA,EAAMC,IAAgB,EAEtBD,EAAMC,GAAe,EAGzB,OAAOD,eAwCP,IACIE,EADAC,EAAWlC,EAAaW,KAE5BsB,EAAWb,EAAUc,EAAUD,EAAU,GACzCb,EAAUc,EAAUD,GAvCC,CAAIX,IACzB,IAAIa,EAAa,GAEbC,EAAYP,EAAUP,EAAM,QAC5BzB,EAAO,GACX,IAAK,IAAIwC,KAAKD,EAEZvC,EAAKsB,KAAKkB,GAEZxC,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,GACpB,IAAK,IAAI4B,EAAI,EAAGA,EAAI5B,EAAKM,OAAS,EAAGsB,GAAK,EACpC5B,EAAK4B,EAAI,GAAK5B,EAAK4B,IAAM,GAC3BU,EAAWG,WAAY,EACvBX,QAAQC,IAAI,YAAaO,EAAWG,YAEpCH,EAAWG,WAAY,EAKXT,EAAUP,EAAM,SAoBhCiB,CAAkB7C,GAEpB8C,GCzMA,IAEIC,EAFAC,EAAW,GAcbD,EALe,WAOfC,EAAW1C,EAAaW","sources":["videoPoker/video-poker-bootcamp/helperFunctions.js","videoPoker/video-poker-bootcamp/gameIncantation.js"],"sourcesContent":["//test vairables\r\nlet testVariable = [\r\n  {\r\n    imageRef: \"Spades 8\",\r\n    name: \"8\",\r\n    rank: 8,\r\n    replaceToggle: false,\r\n    suit: \"Spades\",\r\n  },\r\n  {\r\n    imageRef: \"Spades 8\",\r\n    name: \"2\",\r\n    rank: 7,\r\n    replaceToggle: false,\r\n    suit: \"Diamond\",\r\n  },\r\n  {\r\n    imageRef: \"Spades 8\",\r\n    name: \"King\",\r\n    rank: 5,\r\n    replaceToggle: false,\r\n    suit: \"Clubs\",\r\n  },\r\n  {\r\n    imageRef: \"Spades 8\",\r\n    name: \"4\",\r\n    rank: 4,\r\n    replaceToggle: false,\r\n    suit: \"Spades\",\r\n  },\r\n  {\r\n    imageRef: \"Spades 8\",\r\n    name: \"6\",\r\n    rank: 6,\r\n    replaceToggle: false,\r\n    suit: \"Hearts\",\r\n  },\r\n];\r\n\r\n// Get a random index ranging from 0 (inclusive) to max (exclusive).\r\nconst getRandomIndex = (max) => Math.floor(Math.random() * max);\r\n\r\n// Shuffle an array of cards\r\nexport const shuffleCards = (cards) => {\r\n  // Loop over the card deck array once\r\n  for (let currentIndex = 0; currentIndex < cards.length; currentIndex += 1) {\r\n    // Select a random index in the deck\r\n    const randomIndex = getRandomIndex(cards.length);\r\n    // Select the card that corresponds to randomIndex\r\n    const randomCard = cards[randomIndex];\r\n    // Select the card that corresponds to currentIndex\r\n    const currentCard = cards[currentIndex];\r\n    // Swap positions of randomCard and currentCard in the deck\r\n    cards[currentIndex] = randomCard;\r\n    cards[randomIndex] = currentCard;\r\n  }\r\n  // Return the shuffled deck\r\n\r\n  return cards;\r\n};\r\n\r\n//creating a deck as an array\r\n/*each card element is an object\r\n*Card = {\r\n  name: cardName,\r\n  suit: currentSuit,\r\n  rank: rankCounter,\r\n  color: suitColor,}\r\n  @return array of card that comprises the deck\r\n*/\r\nexport const makeDeck = () => {\r\n  // Initialise an empty deck array\r\n  const newDeck = [];\r\n  // Initialise an array of the 4 suits in our deck. We will loop over this array.\r\n  const suits = [\"Hearts\", \"Diamond\", \"Clubs\", \"Spades\"];\r\n\r\n  // Loop over the suits array\r\n  for (let suitIndex = 0; suitIndex < suits.length; suitIndex += 1) {\r\n    // Store the current suit in a variable\r\n    const currentSuit = suits[suitIndex];\r\n    // Loop from 1 to 13 to create all cards for a given suit\r\n    // Notice rankCounter starts at 1 and not 0, and ends at 13 and not 12.\r\n    // This is an example of a loop without an array.\r\n    for (let rankCounter = 1; rankCounter <= 13; rankCounter += 1) {\r\n      // By default, the card name is the same as rankCounter\r\n      let cardName = `${rankCounter}`;\r\n\r\n      // If rank is 1, 11, 12, or 13, set cardName to the ace or face card's name\r\n      if (cardName === \"1\") {\r\n        cardName = \"Ace\";\r\n      } else if (cardName === \"11\") {\r\n        cardName = \"Jack\";\r\n      } else if (cardName === \"12\") {\r\n        cardName = \"Queen\";\r\n      } else if (cardName === \"13\") {\r\n        cardName = \"King\";\r\n      }\r\n\r\n      // Create a new card with the current name, suit, and rank\r\n      const card = {\r\n        name: cardName,\r\n        suit: currentSuit,\r\n        rank: rankCounter,\r\n        imageRef: `${currentSuit} ${cardName}`,\r\n        replaceToggle: false,\r\n      };\r\n\r\n      // Add the new card to the deck\r\n      newDeck.push(card);\r\n    }\r\n  }\r\n\r\n  // Return the completed card deck\r\n  return newDeck;\r\n};\r\n\r\n/*Dealing of card into the hand and to replace cards that have been removed\r\n@ param deck {array} array containing the full deck ofcards\r\n@ param hand {array} containing the cards on the player's hand\r\n@ param noOfCards {number} number of cards to be dealt out - used this to scale for diff sized hands for diff games\r\n*/\r\nexport const dealCards = (deck, hand, noOfCards = 0) => {\r\n  //deals the set number of cards to an empty hand\r\n  if (!hand) {\r\n    //problem of variable hand being null hence unable to push and needs dealtHand\r\n    let dealtHand = [];\r\n    for (let i = 0; i < noOfCards; i += 1) {\r\n      dealtHand.push(deck.pop());\r\n    }\r\n    return dealtHand;\r\n  }\r\n  // fills the empty gaps in the hand\r\n  else {\r\n    for (let i = 0; i < hand.length; i += 1) {\r\n      if (hand[i].replaceToggle == true) {\r\n        console.log(\"card\", hand[i]);\r\n        hand[i] = null; // i dont know what my console is showing me wtf\r\n        hand[i] = deck.pop();\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n//tally up the player's hand and return the tallied object\r\n//@param hand {array} containing the cards {onject}\r\n//@param attribute {string} the attribute within the card object that you want to tally like suit or cardname\r\n//@return tally{object} containing all the cards within hand and the count of cards\r\nconst tallyHand = (hand, attribute) => {\r\n  let tally = {};\r\n  for (let i = 0; i < hand.length; i += 1) {\r\n    let tallyTarget = hand[i][attribute];\r\n    if (tallyTarget in tally) {\r\n      tally[tallyTarget] += 1;\r\n    } else {\r\n      tally[tallyTarget] = 1;\r\n    }\r\n  }\r\n  return tally;\r\n};\r\n\r\n//tally the names and suits to use as logic for win checks\r\nconst tallyCombinations = (hand) => {\r\n  let handCombos = {};\r\n  // tally for card ranks to check for straights\r\n  let rankTally = tallyHand(hand, \"rank\");\r\n  let rank = [];\r\n  for (let x in rankTally) {\r\n    //object properties that are indices are sorted numerically\r\n    rank.push(x);\r\n  }\r\n  rank = [3, 4, 5, 6, 7];\r\n  for (let i = 0; i < rank.length - 1; i += 0) {\r\n    if (rank[i + 1] - rank[i] == 1) {\r\n      handCombos.straights = true;\r\n      console.log(\"handcombo\", handCombos.straights);\r\n    } else {\r\n      handCombos.straights = false;\r\n    }\r\n  }\r\n  // console.log(\"straights\", handCombos.straights);\r\n  // tally for card suits to use for flush\r\n  let suitTally = tallyHand(hand, \"suit\");\r\n};\r\n\r\n//Runs through the tally object to look for pairs, triples and associated combinations\r\nconst checkWinCombination = () => {\r\n  //count for pairs\r\n  //count for triples\r\n  //count for four of a kind\r\n  //pair and triple = full house\r\n  //double pair\r\n  //flush (same suit)\r\n  //straights consecutive number\r\n  //royal flush straight start 10 ends at Ace\r\n};\r\n\r\nfunction testingFunction() {\r\n  let testDeck = shuffleCards(makeDeck());\r\n  let testHand; // initHand(5);\r\n  testHand = dealCards(testDeck, testHand, 5);\r\n  dealCards(testDeck, testHand);\r\n  tallyCombinations(testVariable);\r\n}\r\ntestingFunction();\r\n","import { makeDeck, dealCards, initHand, shuffleCards } from \"./helperFunctions\";\r\n\r\nlet gameDeck = [];\r\nlet handSize = 5;\r\nlet gameState;\r\nlet playerData = {\r\n  name: \"\",\r\n  currentBet: 0,\r\n  bank: \"100\",\r\n  hand: undefined,\r\n};\r\nconst betPhase = \"betPhase\";\r\nconst dealPhase = \"dealPhase\";\r\nconst payOutPhase = \"payOutPhase\";\r\n\r\nconst initGame = () => {\r\n  gameState = betPhase;\r\n  //create game deck and shuffle cards\r\n  gameDeck = shuffleCards(makeDeck());\r\n  //generates the UI for game\r\n};\r\n\r\ninitGame();\r\n"],"names":["$fb38f3c6cccb7009$var$testVariable","imageRef","name","rank","replaceToggle","suit","$fb38f3c6cccb7009$export$72b40e49bda5abb9","cards","currentIndex","length","randomIndex","max","Math","floor","random","randomCard","currentCard","$fb38f3c6cccb7009$export$eafd19060c8b57dd","newDeck","suits","suitIndex","currentSuit","rankCounter","cardName","card","push","$fb38f3c6cccb7009$export$bc03ba615e47b5f3","deck","hand","noOfCards","dealtHand","i","pop","console","log","$fb38f3c6cccb7009$var$tallyHand","attribute","tally","tallyTarget","testHand","testDeck","handCombos","rankTally","x","straights","$fb38f3c6cccb7009$var$tallyCombinations","$fb38f3c6cccb7009$var$testingFunction","$d566a4d0148ba0f0$var$gameState","$d566a4d0148ba0f0$var$gameDeck"],"version":3,"file":"gameSite.2bb38e9a.js.map"}